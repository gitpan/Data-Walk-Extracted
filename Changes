Revision history for Data-Walk-Extracted

v0.03_01  2012-02-10 16:07:16 America/Los_Angeles

Initial Release

v0.05_01  2012-03-21 20:03:17 America/Los_Angeles

Adding functionality to support Data::Walk::Prune

v0.05_03  2012-04-03 13:54:29 America/Los_Angeles

First Release to CPAN

v0.05_07  2012-04-04 11:34:36 America/Los_Angeles

Removed YAML from the test files since it was an 
unnessesary dependancy that caused test fails.

Also updated some links in the POD and included 
Data::ModeMerge in the See Also section

v0.007_001 2012-04-19 08:46:23 America/Los_Angeles

Reworked the guts to allow multiple Rolls to be added to the same base class .  
This is a major re-write to the ::Extracted class interface to support this but 
only a minor changes to the Role interfaces.  Among other changes the ::Extracted 
class does not add a default role anymore.  The ::Extracted class no longer has 
public method for processing data either.  Additionally the MooseX::StrictConstructor 
(Module/Pragma) was added to the class.

Data::Walk::Graft is added to the package

Testing for Data::Walk::Print is switched from Test::Output to Test::And::Output.

v0.007_005 2012-05-17 08:24:20 America/Los_Angeles

Updated the POD to be consistent.  

Switched testing from Test::And::Ouput to use Capture::Tiny.

v0.011_001 2012-07-09 14:14:53 America/Los_Angeles

Changes includes additions to use this package in Log::Shiras

Added a method for tracking actual subtractions 
in the prune_data method.  This includes a 'remember_prune_items' attribute 
and a 'get_pruned_positions' method.  See the POD for Data::Walk::Prune for 
more details.

Added another role Data::Walk::Clone to allow for targeted cloning of data 
structures.

moved the _dispatch_method to Data::Walk::Extracted so that dispatch tables by 
Role could be added without duplicating that code.

Changed the graft_data function to clone the reference and allow for clone 
definition (Using Data::Walk::Clone)

built in a 'Single shot settings' processor of attributes passed in the method call for 
the _process_the_data method in Data::Walk::Extracted.  This will allow for possible 
attribute calls in the method that will only affect that one pass of the method call.

Added graft memory like the prune memory

created the private method _build_branch in Data::Walk::Extracted to build the branch 
to the current branchref point if requested.   This is used by Data::Walk::Graft and 
Data::Walk::Prune

Refactored Data::Walk::Extracted to use dispatch tables

Improved the Data::Walk::Prune documentation and changed the prune memory attribute name

Added the ability of the sort_XXX attributes to take sort CodeRefs ex. sub{ $b cmp $a }

v0.013_001 2012-07-09 21:59:29 America/Los_Angeles

added recognition of a 'name' key in the '_dispatch_method' for Data::Walk::Extracted (Meta data for dispatch methods)

Fixed a failure to seed empty hash refs and array refs in the deep_clone method


v0.015_003 2012-08-28 17:22:53 America/Los_Angeles

changed the _extracted_ref_type to use hash key lookups rather than if then statements.  
This isn't really a standard disptach table since the ref type hasn't been determined 
yet.

Added multilayer support to one-shot attributes.  This allows the one shot attribute to stay 
in force for complete method call from a Role if the role makes a nested walking call to 
another Role.

Another re-write of the guts of Data::Walk::Extracted to untangle the path of recursion.

The re-write of Data::Walk::Extracted includes the addition of a "Zeroth" branch_ref element.

The re-write of Data::Walk::Extracted prompted the addition of some dispatch tables to 
Data::Walk::Print.

Added a DEFAULT failover to the dispatch method choices

Added a Graft memory to Data::Walk::Graft

v0.015_005 2012-08-29 12:05:41 America/Los_Angeles

Removed the (bad) fixed primary call in Data::Walk:Clone - I don't remember how it got there.